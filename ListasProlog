LISTA REVERSA

FUNCION

my_reverse(?Lista,Resultado).

Sera cierto cuando Resultado unifica con la Lista que tenga todos los elementos en orden inverso.

EJ: my_reverse([1,2,3,4,5], R).
	R=[5,4,3,2,1].

my_reverse([],[]).

my_reverse([Cab|Resto],R2 ) :- my_reverse(Resto, R), append(R,cab,R2).

cab 1
resto 2,3,4,5
R 5,4,3,2

------------------------------------------------------------------------------------------
ELEMENTO N 

FUNCION

elementon(?Lista, +N, -R)

Sera cierto cuando R unifique con el elemento que este en la posición N de Lista

EJ: elementon([a,b,c],2,X).
	X=b.

elementon([Cab|_],1,Cab).

elementon([_|Resto],N, R) :- N>1, N2 is N-1, elementon(Resto,N2,R).

ESTO SE EJECUTA DE UNA MANERA RECURSIVA, SI CUANDO LLEGA LA FUNCION "N" ES MAYOR QUE 1 SE SEPARA LA CABEZA Y SE USARA COMO SUTITUTO N2 PARA VERIFICAR DE NUEVO LA RECURSIVIDAD, CUANDO LLEGA  ALA SEGUNDA FUNCION ESA SOLO TRATA DE ELEGIR EL CAMINO, SI N2 QUE PREVIAMENTE HA OBTENIDO EL VALOR RESTADO DE N, SI N2 ES 1 SE USARA LA FUNCION BASE Y UNIFICARA CON EL ELEMENTO CABEZA, SIN EMBARGO SI N2 SIGUE SIENDO MAYOR VOLVERA A HACER EL CICLO DE RESTA Y LLAMADA A LA FUNCIO, ASI HASTA QUE LLEGUE EL MOMENTO DE QUE N2 SEA 1 Y SE UNIFIQUE CON LA CABEZA SI O SI
-------------------------------------------------------------------------------------------
LONGITUD

FUNCION

my_length(?Lista, -R)

será cierto cuando R unifique con la cantidad de elementos que tiene Lista

EJ: my_length([1,2,3,4], 4).

my_length([],0).

my_length([_|Resto], R2):- my_length(Resto,R), R2 is R+1.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ORDENACION QUICKSORT

FUNCION
% ordena_quick(+Lista,-ListaR).
% sera cierto cuando ListaR unifique con todos los elementos de Lista ordenados de menor a mayor.

ordena_quick([],[]).

ordena_quick([cab|Resto], ListaR):- divide(cab, Resto,Men,May), 
ordena_quick(Men,Men2), 
ordena_quick(May, May2), 
append(Men2, [Cab|May2],ListaR).


% divide(+Elem, +Lista, -Menores, -Mayores)-----------------------------
% sera cierto cuando todos los elementos de Menores y Mayores
% se encuentren en Lista 

divide([],[],[],[]).

divide(E, [cab|L], [Cab|Menores], Mayores):- Cab =< E, divide(E,L,Menores,Mayores).

divide(E, [cab|L], Menores, [Cab|Mayores]):- Cab > E, divide(E,L,Menores,Mayores).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

NUMEROS PRIMOS

FUNCIONES 

% primo(+X)----------------------------------------------
% sera cierto cuando X sea un numero primo
primo(_).

primo(X):- lista_divisores(X, 1, [X|1]), 

% lista_divisores(+X, +Y, -ListaD)-----------------------
% sera cierto cuando ListaD unifique con los numeros 
% divisibles que hay entre X e Y

lista_divisores(X,X,[X]).

lista_divisores(X, Y, Lista):- X mod Y is 0, 
append(Lista,Y,ListaR), 
Y is Y+1, 
lista_divisores(X, Y, ListaR). 

% primosentrexy(+X, +Y, -ListaR)-------------------------
% sera cierto cuando ListaR unifica con los elementos
% que son primos entre X e Y

primosentrexy(X,X,[X]).

primosentrexy(X,Y, Lista):- primos(Y), 
append(Lista, Y, ListaR), 
Y<X, 
Y is Y+1, 
primosentrexy(X, Y, ListaR).

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PERMUTACIONES DE UNA LISTA

FUNCION
% permuta(+Lista,-ListaR)
% sera cierto cuando ListaR unifique con
% los elementos de Lista ordenados en cualquier orden

permuta([],[]).

permuta([Cab|Resto], Listaf):- selecciona_uno(Cab, [Cab|Resto], Listaf), permuta(Resto, Listaf).


% selecciona_uno(+Elem, +Lista, -Resto)
% sera cierto cuando elem unifica con cualquier
% elemento de Lista y Resto unifica con una lista que tiene
% los elementos de Lista en en el mismo orden menos el Elem

selecciona_uno(E,[E|R],R).

selecciona_uno(E, [Cab|Res], [Cab|R]):- selecciona_uno(Res, E, R).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

COMPRIME

FUNCION
% comprime(+Lista, -Resultado)
% es cierto cuando Resultado unifica con Lista de la siguiente forma:
%
% comprime([a,a,a,b,b,c,c,d],R)
% R= [(a,3), (b,2),(c,2),(d,1)]

comprime([],[]).
comprime([A], [A,1]).

% Elementos consecutivos
comprime([cab, cab|Resto], [(cab,N2)|L):- comprime([cab|Resto, [(cab, N)|L]), N2 is N+1.

% Elementos no consecutivos ( distintos )
comprime([cab1, cab2|Resto], ):- cab1 /= cab2, comprime([cab2|Resto], L).

%comprime(Lista, ):- comprime(Resto, R).
% MAL PENSADO
% contador(+Elem, +Lista, -num, -res)
% es cierto cuando res unifique con el numero
% de elementos iguales a Elem en la lista
%contador(E,[E],1,()).
%
%contador(E,[Cab|Resto] , num, res):- num==cab,
%num is num + 1, 
%res is (E,num),
%contador(E, Resto, num, [(E,num)|R]).

%------------------------------------------------------
% mas_veces(+Lista, -Elem, -Num)
% es cierto cuando Elem unifica con el elemento
% que se repite más veces en la lista Lista
% y Num unifica con el número de veces que se
% repite dicho elemento.

mas_veces()

%--------------------------------------------------------------------------------------------------------------------------------------------------------------
